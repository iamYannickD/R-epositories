select(IST, Countrycode, Prop_ITD_35days) |>
filter(!is.na(Prop_ITD_35days), Prop_ITD_35days > 0) |>
pivot_longer(cols = c(Prop_ITD_35days), names_to = "Proportions", values_to = "Values") |>
filter(Countrycode != "SOM") |> #removed somalia from the list of countries
ggplot() +
geom_bar(aes(x =  interaction(Countrycode, IST), y = Values, fill = IST), stat = "identity", position = position_dodge(), width = .9, color = "black") +
scale_fill_manual(
values = c("Prop_ITD_35days" = "gold", "Prop_ITD_35days" = "darkblue"),
labels = c("Prop_ITD_35days" = "Among all samples (with results)", "Prop_ITD_35days" = "Among positive samples")
) +
scale_fill_manual(
values = c("WEST" = "darkblue", "CENTRAL" = "orange", "ESA" = "gold"),
labels = c("WEST" = "West Africa", "CENTRAL" = "Central Africa", "ESA" = "East and Southern Africa")
) +
labs(x = "Lab Name", y = "% Samples with results", fill = "", title = "ES - ITD Results by Lab in 35 days") +
theme_minimal() +
geom_hline(yintercept = 80, linetype = "dotted", color = "green", linewidth = 2) + # green line for the target
scale_y_continuous(breaks = seq(0, 100, by = 20), expand = c(0, 0.1)) +  # Graduate y-axis by 20%
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text = element_text(face = "bold", size = 10, color = "black"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.line = element_line(color = "black", size = 0.8),
axis.ticks = element_line(color = "black", size = 0.8),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
) + scale_x_discrete(labels = function(x) sub("\\..*$", "", x)) # To display only CountryCode on x-axis
# saving the plot as image png
ggsave("ESCountry35_plot.png", ES_byCountry35, path = "../data/outputs/")
EStables2024 |>
dplyr::mutate(
Labname = str_replace_all(Labname, c("ENTEBBE" = "UGA", "GHANA" = "GHA", "IBD, Nigeria" = "IBD",
"INRB" = "RDC", "IPD SEN" = "SEN", "IPM,MAD" = "MAD",
"IPM, MAD" = "MAD", "MDG, Nigeria" = "MDG", "ESWATINI" = "SOA",
"KEMRI" = "KEN", "ZAM-UTH" = "ZAM", "ZAM UTH" = "ZAM") ),
Labname = if_else( (is.na(Labname) & Countryname == "ANGOLA"), "SOA", Labname)
) |>
arrange(Labname) |>
distinct(IDNumber, .keep_all = "TRUE") |>
#group_by(Labname) |>
summarise(es_workload_by_lab = n())
EStables2024 |>
dplyr::mutate(
Labname = str_replace_all(Labname, c("ENTEBBE" = "UGA", "GHANA" = "GHA", "IBD, Nigeria" = "IBD",
"INRB" = "RDC", "IPD SEN" = "SEN", "IPM,MAD" = "MAD",
"IPM, MAD" = "MAD", "MDG, Nigeria" = "MDG", "ESWATINI" = "SOA",
"KEMRI" = "KEN", "ZAM-UTH" = "ZAM", "ZAM UTH" = "ZAM") ),
Labname = if_else( (is.na(Labname) & Countryname == "ANGOLA"), "SOA", Labname)
) |>
arrange(Labname) |>
distinct(IDNumber, .keep_all = "TRUE") |>
group_by(Labname) |>
summarise(es_workload_by_lab = n())
# Check if the package pacman is installed
if (!require("pacman")) {install.packages("pacman")}
library("pacman")
# Load packages =====
#RODBC to be able to work with microsoft access databases, allowing R to connect to Open Database Connectivity (ODBC) APIs
p_load(tidyverse, RODBC,gt, gtExtras, webshot, officer)
#Give the path to the AFP database
path_AFP <- "../data/dbs/test/afp.mdb"
# Connect to the Microsoft Access database =====
AFPdb <- DBI::dbConnect(odbc::odbc(),
.connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", path_AFP))
# load data in R =====
# Retrieve all data from the AFP database
AFPtables <- DBI::dbGetQuery(AFPdb, "SELECT * FROM POLIOLAB ORDER BY LabName, EpidNumber;", stringsAsFactors = FALSE) |>
tibble() |>  mutate(proxy_date_infor_itd = coalesce(DateIsolateinforITD, DateLarmIsolateRec, DateRarmIsolateSentforITD)
) |>
# select samples collected in 2024 only
filter(substr(ICLabID, start = 5, stop = 6) == 24 )
Specify_the_period <- paste0("WEEK 1 - " ,
(epiweek(as.Date(ymd(AFPtables$DateUpdated))) - 1) |> unique(), ", 2024")
# Analysis of databases =====
AFPtables_gt <-
AFPtables |>
filter(LabName != "CDC") |>
distinct(ICLabID, .keep_all = "TRUE") |>
select(LabName, DateStoolReceivedinLab, StoolCondition, FinalCellCultureResult, DateFinalCellCultureResults,
proxy_date_infor_itd, FinalITDResult, DateFinalrRTPCRResults) |>
mutate( FinalCellCultureResult = str_replace_all(FinalCellCultureResult, "Supected", "Suspected") ) |>
mutate(StoolCondition = str_replace_all(StoolCondition, "1-AdÃ©quat", "1-Good")) |>
group_by(LabName) |>
mutate(workload_by_lab = n(),
# sample conditions
is_good = if_else( (StoolCondition == "1-Good" | StoolCondition == "1-Bonne"), 1, 0),
# cell culture < 14 days
is_culture_result = if_else(!is.na(FinalCellCultureResult), 1, 0),
time_culture_results = as.numeric(difftime(DateFinalCellCultureResults, DateStoolReceivedinLab, units = "days")),
is_culture_results_14days = if_else( (!is.na(FinalCellCultureResult) & time_culture_results < 15 & time_culture_results > 0), 1, 0),
is_itd = if_else( (FinalCellCultureResult == "1-Suspected Poliovirus" | FinalCellCultureResult == "4-Suspected Poliovirus + NPENT"), 1, 0),
time_itd_results_7days = as.numeric(difftime(DateFinalrRTPCRResults, proxy_date_infor_itd, units = "days")),
time_itd_results_21days = as.numeric(difftime(DateFinalrRTPCRResults, DateStoolReceivedinLab, units = "days")),
culture_results = sum(is_culture_result),
culture_results_14days = sum(is_culture_results_14days),
ITD_results = sum(is_itd),
is_itd_7days = if_else(
( (FinalCellCultureResult == "1-Suspected Poliovirus" | FinalCellCultureResult == "4-Suspected Poliovirus + NPENT") &
!is.na(FinalITDResult) & time_itd_results_7days < 8 & time_itd_results_7days >= 0), 1, 0),
ITD_results_7days = sum(is_itd_7days),
is_itd_21days = if_else( (FinalCellCultureResult == "1-Suspected Poliovirus" | FinalCellCultureResult == "4-Suspected Poliovirus + NPENT") &
(!is.na(FinalITDResult) & time_itd_results_21days < 22 & time_itd_results_21days >= 0), 1, 0),
ITD_results_21days = sum(is_itd_21days)
) |>
summarize(
workload_by_lab = n(),
samples_good_cond = sum(is_good, na.rm = TRUE),
Prop_sample_good_cond = 100 * sum(is_good, na.rm = TRUE) / workload_by_lab,
culture_results = sum(is_culture_result, na.rm = TRUE),
culture_results_14days = sum(is_culture_results_14days, na.rm = TRUE),
Prop_culture_results_14days = 100 * culture_results_14days / culture_results,
ITD_results = sum(is_itd, na.rm = TRUE),
ITD_results_7days = sum(is_itd_7days, na.rm = TRUE),
Prop_ITD_7days = 100 * ITD_results_7days / ITD_results,
ITD_results_21days = sum(is_itd_21days, na.rm = TRUE),
Prop_ITD_21days = 100 * ITD_results_21days / ITD_results
) |>
dplyr::select(LabName, workload_by_lab, samples_good_cond, Prop_sample_good_cond, culture_results, culture_results_14days,
Prop_culture_results_14days, ITD_results, ITD_results_7days, Prop_ITD_7days, ITD_results_21days, Prop_ITD_21days) |> #check values
gt() |>
#edit some columns names
cols_label(
"workload_by_lab" = "# of Stool specimens",
"samples_good_cond" = "# samples good conditions",
"culture_results" = "# culture Result",
"culture_results_14days" = "# of culture results in 14 days",
"ITD_results_7days" = "# of ITD Results in 7 days",
"ITD_results" = "# ITD results",
"Prop_sample_good_cond" = "Samples in Good Condition",
"Prop_culture_results_14days" = "PV Isolation Results on Time",
"Prop_ITD_7days" = "ITD Results in 7 days of receipt of Isolate",
"ITD_results_21days" = "# of ITD Results in 21 days",
"Prop_ITD_21days" = "Final lab results availaible in 21 days of receipt"
) |>
#center the values in the defined columns
cols_align(
align = "center",
columns = c(1:12)
) |>
#give a header to the table as well as a sub title
tab_header(
title = md(paste0("**AFP : SUMMARY OF AFRO LABORATORY KEY PERFORMANCE INDICATORS (KPIs)** ")),
subtitle = md(paste0("**",Specify_the_period,"**") ) ) |>
# add percentage in cells
fmt_number(
columns = c(`Prop_sample_good_cond`, `Prop_culture_results_14days`,
`Prop_ITD_7days`, `Prop_ITD_21days`),
decimals = 0,
pattern = "{x} %"
) |>
sub_missing(
columns = 2:12,
rows = everything(),
missing_text = "-"
#missing_text = "---"
) |>
#color the table based on the values in those cells
# For sample conditions ====
tab_style(
style = cell_fill(color = "#00B050"),
locations = cells_body(
columns = Prop_sample_good_cond,
rows = Prop_sample_good_cond >= 80)
)  |>
tab_style(
style = cell_fill(color = "yellow"),
locations = cells_body(
columns = Prop_sample_good_cond,
rows = Prop_sample_good_cond < 80)
) |>
tab_style(
style = cell_fill(color = "#00B050"),
locations = cells_body(
columns = Prop_sample_good_cond,
rows = Prop_sample_good_cond == 100)
) |>
# for pv isolation time 14 days
tab_style(
style = cell_fill(color = "#00B050"),
locations = cells_body(
columns = Prop_culture_results_14days,
rows = Prop_culture_results_14days >= 80)
)  |>
tab_style(
style = cell_fill(color = "yellow"),
locations = cells_body(
columns = Prop_culture_results_14days,
rows = Prop_culture_results_14days < 80)
) |>
tab_style(
style = cell_fill(color = "#00B050"),
locations = cells_body(
columns = Prop_culture_results_14days,
rows = Prop_culture_results_14days == 100)
) |>
# for ITD 7 days
tab_style(
style = cell_fill(color = "#00B050"),
locations = cells_body(
columns = Prop_ITD_7days,
rows = Prop_ITD_7days >= 80)
)  |>
tab_style(
style = cell_fill(color = "yellow"),
locations = cells_body(
columns = Prop_ITD_7days,
rows = Prop_ITD_7days < 80)
) |>
tab_style(
style = cell_fill(color = "#00B050"),
locations = cells_body(
columns = Prop_culture_results_14days,
rows = Prop_culture_results_14days == 100)
) |>
# for ITD 21 days
tab_style(
style = cell_fill(color = "#00B050"),
locations = cells_body(
columns = Prop_ITD_21days,
rows = Prop_ITD_21days >= 80)
)  |>
tab_style(
style = cell_fill(color = "yellow"),
locations = cells_body(
columns = Prop_ITD_21days,
rows = Prop_ITD_21days < 80)
) |>
tab_style(
style = cell_fill(color = "#00B050"),
locations = cells_body(
columns = Prop_ITD_21days,
rows = Prop_ITD_21days == 100)
) |>
# for no data
tab_style(
style = cell_fill(color = "gray"),
locations = cells_body(
columns = Prop_ITD_21days,
rows = is.na(Prop_ITD_21days))
) |>
tab_style(
style = cell_fill(color = "gray"),
locations = cells_body(
columns = Prop_ITD_7days,
rows = is.na(Prop_ITD_7days))
) |>
# Color in gray the table and beautify the formating
opt_stylize(style = 6, color = 'gray') |>
#call that theme
#other themes gt_theme_excel()  |>gt_theme_pff() |>
gt_theme_excel() |>
opt_align_table_header(align = "center") |>
#reshape the table
tab_options(
data_row.padding = px(2),
summary_row.padding = px(3), # A bit more padding for summaries
row_group.padding = px(4)    # And even more for our groups
) |>
tab_style(
#style = cell_text(weight = "bold"),
# Color each country in the group
style = cell_fill(color = "lightgray"),
locations = cells_row_groups(groups = everything())
) |>
opt_css(
css = "
.cell-output-display {
overflow-x: unset !important;
}
div#two {
overflow-x: unset !important;
overflow-y: unset !important;
}
#two .gt_col_heading {
position: sticky !important;
top: 0 !important;
}
"
)
AFPtables_gt
# Check if the package pacman is installed
if (!require("pacman")) {install.packages("pacman")}
library("pacman")
# Install and load multiple desired packages at once
#RODBC to be able to work with microsoft access databases, allowing R to connect to Open Database Connectivity (ODBC) APIs
# patch work to easily combine and display ggplot graphs
p_load(tidyverse, RODBC, ggrepel, patchwork)
# import dataset
workload <- read_csv("../data/data/yr_sample_workloads.csv")
#Give the path to the AFP database
path_AFP = "../data/dbs/afp_wk21.mdb"
path_ES_2024 = "../data/dbs/es_2024.mdb"
# Connect to the Microsoft Access database
AFPdb <- DBI::dbConnect(odbc::odbc(),
.connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", path_AFP))
ESdb2024 <- DBI::dbConnect(odbc::odbc(),
.connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", path_ES_2024))
# load data in R
# Retrieve all data from the AFP database
AFPtables <- DBI::dbGetQuery(AFPdb, "SELECT * FROM POLIOLAB ORDER BY LabName, EpidNumber;", stringsAsFactors = FALSE) |>
tibble() |>
# select samples collected in 2024 only
filter(substr(ICLabID, start = 5, stop = 6) == 24 )
EStables2024 <- DBI::dbGetQuery(ESdb2024, "SELECT * FROM Environmental ORDER BY IDNumber;", stringsAsFactors = FALSE) |>
as_tibble()
Specify_the_period <- paste0("WEEK 1 - ",
(epiweek(as.Date(ymd_hms(AFPtables$DateUpdated))) - 1) |> unique(), ", 2024")
# count samples processed by labs
#Sum of AFP samples
afp_total_samples <-
AFPtables |>
filter(LabName != "CDC") |>
distinct(ICLabID, .keep_all = TRUE) |>
group_by(LabName) |>
summarise(afp_workload_by_lab = n()) |>
ungroup() |>
summarise(afp_total = sum(afp_workload_by_lab))
#Sum of AFP samples
es_total_samples <-
#bind_rows(EStables2023, EStables2024) |>
EStables2024 |>
distinct(IDNumber, .keep_all = TRUE) |>
group_by(Labname) |>
summarise(es_workload_by_lab = n()) |>
ungroup() |>
summarise(es_total = sum(es_workload_by_lab))
# New rows to add
dynamic_rows <- tibble(
TYPE = c("AFP", "ES"),
YEAR = 2024,
`# of Samples` = c( as.integer(afp_total_samples), as.integer(es_total_samples))
)
# Bind the new rows to the original tibble
afro_workload <- bind_rows(workload, dynamic_rows)
plot_AFP <-
afro_workload |>
filter(TYPE == "AFP") |>
ggplot() +
geom_line( aes(x = YEAR, y = `# of Samples`), color = "orange2", size = 2) +
geom_ribbon(aes(x = YEAR, ymin = 0, ymax = `# of Samples`, xmin = 2018.75, xmax = 2024.5),
fill = "orange4", alpha = 0.3) +
geom_point(aes(x = YEAR, y = `# of Samples`), size = 3, color = "black") +
geom_text_repel(aes(x = YEAR, y = `# of Samples`, label = `# of Samples` ),
min.segment.length = Inf, seed = 42, box.padding = 0.5,
point.padding = 0, position = position_nudge_repel(y = 2000)) +
#color = "white",bg.color = "grey30", bg.r = 0.15, direction = "y" +
labs(title = paste0("Workload Analysis for AFP as of ", Specify_the_period), x = "Year", y = "# of Samples")  +
theme_minimal()
plot_ES <-
afro_workload |>
filter(TYPE == "ES") |>
ggplot() +
geom_line( aes(x = YEAR, y = `# of Samples`), color = "blue4", size = 2) +
geom_ribbon(aes(x = YEAR, ymin = 0, ymax = `# of Samples`, xmin = 2018.75, xmax = 2024.5),
fill = "lightblue", alpha = 0.3) +
geom_point(aes(x = YEAR, y = `# of Samples`), size = 3, color = "black") +
geom_text_repel(aes(x = YEAR, y = `# of Samples`, label = `# of Samples` ),
min.segment.length = Inf, seed = 42, box.padding = 0.5,
point.padding = 0, position = position_nudge_repel(y = 500)) +
#color = "white",bg.color = "grey30", bg.r = 0.15, direction = "y" +
labs(title = paste0("Workload Analysis for ES as of ", Specify_the_period), x = "Year", y = "# of Samples")  +
theme_minimal()
combined <- plot_AFP / plot_ES
combined
#check directory
getwd()
# Check if the package pacman is installed
if (!require("pacman")) {install.packages("pacman")}
library("pacman")
# Install and load multiple desired packages at once
#RODBC to be able to work with microsoft access databases, allowing R to connect to Open Database Connectivity (ODBC) APIs
# patch work to easily combine and display ggplot graphs
p_load(tidyverse, RODBC, patchwork)
#Give the path to the AFP database
path_AFP = "../data/dbs/wk_24/afp_wk_24.mdb"
path_ES_2024 = "../data/dbs/wk_24/es_2024_wk24.mdb"
# Connect to the Microsoft Access database
AFPdb <- DBI::dbConnect(odbc::odbc(),
.connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", path_AFP))
ESdb2024 <- DBI::dbConnect(odbc::odbc(),
.connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", path_ES_2024))
Specify_the_period <- paste0("WEEK 1 - ",
(epiweek(as.Date(ymd_hms(AFPtables$DateUpdated))) - 1) |> unique(), ", 2024")
# load data in R
# Retrieve all data from the AFP database
AFPtables <- DBI::dbGetQuery(AFPdb, "SELECT * FROM POLIOLAB ORDER BY LabName, EpidNumber;", stringsAsFactors = FALSE) |>
tibble() |>
# select samples collected in 2024 only
filter(substr(ICLabID, start = 5, stop = 6) == 24 )
EStables2024 <- DBI::dbGetQuery(ESdb2024, "SELECT * FROM Environmental ORDER BY IDNumber;", stringsAsFactors = FALSE) |>
as_tibble()
# bar chart of samples processed by labs
AFP_plot <-
AFPtables |>
#filter( AFPtables$LabName != "CDC" & year(AFPtables$DateOfOnset) > 2023 ) |>
filter( AFPtables$LabName != "CDC") |>
distinct(ICLabID, .keep_all = "TRUE") |>
group_by(LabName) |>
summarise(afp_workload_by_lab = n()) |>
ungroup() |>
#summarise(total_workload = sum(workload_by_lab)) |>
ggplot() +
geom_bar(aes(x = LabName, y = afp_workload_by_lab, fill = "darkblue"), fill = "darkblue", stat = "identity") +
geom_text(aes(x = LabName, y = afp_workload_by_lab, label = afp_workload_by_lab), size = 3.5, fontface = "bold", vjust = -0.5) +
#geom_label(mapping = LabName, data = AFPtables, stat = "identity") +
labs(x = " ", y = "Number of AFP Samples", title = "AFP and other Human Samples" ) +
theme_classic() +
theme(
axis.text = element_text(face = "bold", size = 10, color = "black"),
axis.title = element_text(face = "bold", size = 12, color = "black")
)
ES_plot <-
EStables2024 |>
dplyr::mutate(
Labname = str_replace_all(Labname, c("ENTEBBE" = "UGA", "GHANA" = "GHA", "IBD, Nigeria" = "IBD",
"INRB" = "RDC", "IPD SEN" = "SEN", "IPM,MAD" = "MAD",
"IPM, MAD" = "MAD", "MDG, Nigeria" = "MDG", "ESWATINI" = "SOA",
"KEMRI" = "KEN", "ZAM-UTH" = "ZAM", "ZAM UTH" = "ZAM") ),
Labname = if_else( (is.na(Labname) & Countryname == "ANGOLA"), "SOA", Labname)
) |>
arrange(Labname) |>
distinct(IDNumber, .keep_all = "TRUE") |>
group_by(Labname) |> #total ES samples
summarise(es_workload_by_lab = n()) |>
ungroup() |>
ggplot() +
geom_bar(aes(x = Labname, y = es_workload_by_lab, fill = "orange"), fill = "orange", stat = "identity") +
geom_text(aes(x = Labname, y = es_workload_by_lab, label = es_workload_by_lab), size = 3.5, fontface = "bold", vjust = -0.5) +
#geom_label(mapping = LabName, data = AFPtables, stat = "identity") +
labs(x = "AFRO Polio Labs", y = "Number of ES Samples", title = "ES Samples" ) +
theme_classic() +
theme(
axis.text = element_text(face = "bold", size = 10, color = "black"),
axis.title = element_text(face = "bold", size = 12, color = "black")
)
#patch the 2 visuals (combine them together, on top of each other)
combined_plots <- AFP_plot / ES_plot
combined_plots
# Check if the package pacman is installed (pacman Install and load multiple desired packages at once)
if (!require("pacman")) {install.packages("pacman")}
library("pacman")
#install library to import geojson, ggspatial enable R to read and manipulate geojson spatial features
#and ggrepel allows to edit the labels and avoid overlaps
#raster is for geographic data analysis, in this case to generate a random point within the district polygon
p_load(tidyverse, sf, readxl, geojsonsf, ggspatial, ggrepel, raster)
#load dataset
viruses_isolated <- read_excel("../data/data/linelist_apr_2024.xlsx") |>
mutate(
COUNTRY = str_replace_all(COUNTRY, "DRC", "DEMOCRATIC REPUBLIC OF THE CONGO"),
COUNTRY = str_replace_all(COUNTRY, "COTE D'IVOIRE", "COTE D IVOIRE")
)
# read the master list
# Load the repository containing the links
es_repo <- read_csv("../data/link/access.txt")
# load masterlist
masterlist <- es_repo$lien[1]
es_sites <-   read_csv(masterlist)
# load administrative boundaries
# load administrative boundaries =====
afro_Adm0 <-
read_rds("../data/global.ctry.rds") |>
filter(`WHO_REGION` == "AFRO" |
ADM0_NAME %in% c("EGYPT", "MOROCCO", "TUNISIA", "WESTERN SAHARA", "SUDAN", "LIBYA", "SOMALIA", "DJIBOUTI"))
afro_cntries <-
read_rds("../data/global.ctry.rds") |>
filter(WHO_REGION %in% "AFRO")
afro_Adm1 <- read_rds("../data/global.prov.rds") |>filter(WHO_REGION == "AFRO")
afro_Adm2 <- read_rds("../data/global.dist.rds") |>
filter(WHO_REGION == "AFRO")
# add geocordinates on afp samples and randomize if more than 1 sample was collected in the same district
#In this section, i generate a coordinate for all AFP cases based on their epid number (country code, province code, district code)
#then for each sample i have the geometry of the district were they are in, then i generate a random point inside that district polygon
#so that if more than a sample is collected in the same district, they are not on top of each other
afp_virus <-
viruses_isolated |>
filter(SOURCE != "ENV") |>
mutate(
PROVINCE = str_replace_all(PROVINCE, "HAUT-KATANGA", "HAUT KATANGA"),
DISTRICT = str_replace_all(DISTRICT, "TUDUN", "TUDUN WADA")
) |>
left_join(y = afro_Adm2, by = c("COUNTRY" = str_to_upper("ADM0_NAME"), "PROVINCE" = str_to_upper("ADM1_NAME"), "DISTRICT" = str_to_upper("ADM2_NAME")),
relationship = "many-to-many") |>
dplyr::select(`EPID NUMBER`, VIRUS, SOURCE, COUNTRY, PROVINCE, DISTRICT, `ES SITE NAME`, `ONSET/ COLLECTION`,
Lat_Y = CENTER_LAT, Long_X =  CENTER_LON, SHAPE)
# Function to generate random points within a polygon
generate_random_point <- function(polygon) {
bbox <- as(extent(polygon), "SpatialPolygons")
random_point <- spsample(bbox, 1, type = "random")
return(random_point)
}
# Generate random points for each row
for (i in 1:nrow(afp_virus)) {
district <- afp_virus$DISTRICT[i]
district_polygon <- afro_Adm2 |>
filter(afro_Adm2$ADM2_NAME == district) |>
st_geometry() |>
st_as_sf()
random_point <- generate_random_point(district_polygon)
afp_virus$Long_X[i] <- random_point@coords[1]
afp_virus$Lat_Y[i] <- random_point@coords[2]
}
epidemiology_map
