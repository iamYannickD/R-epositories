system(paste("git add . && git commit -m", shQuote(msg),
env = paste0("GIT_COMMITTER_DATE=", timestamp)) )
}
}
current_date <- current_date + 1
}
# Finalize repository
writeLines(
paste("# HDBSCAN Analysis Project\n",
"Final version completed ", end_date),
"README.md")
system("git add README.md && git commit -m 'Finalize project'")
cat("Repository simulation complete!\n")
cat("Access your project at:", normalizePath(repo_name), "\n")
#––– 0. Load required packages
# (will be installed if missing)
required_pkgs <- c("sf", "raster", "ggplot2", "dplyr", "lubridate")
installed <- rownames(installed.packages())
for(pkg in required_pkgs) {
if (!pkg %in% installed) install.packages(pkg)
}
lapply(required_pkgs, library, character.only = TRUE)
#––– 1. Configuration
dates <- list(
start       = as.Date("2024-09-06"),
end         = as.Date("2025-02-28"),
busy_start  = as.Date("2024-11-01"),
busy_end    = as.Date("2024-12-15")
)
repo_dir <- "gis_project_simulation"
#––– 2. Initialize repository
if (!dir.exists(repo_dir)) dir.create(repo_dir)
setwd(repo_dir)
if (!dir.exists(".git")) system("git init")
#––– 3. Define script generation functions
# Initial GIS analysis script
initial_script <- function(file = "analysis.R") {
lines <- c(
"# GIS Analysis Project",
"# Initial setup: load spatial data",
"library(sf)",
"library(ggplot2)",
"",
"# Read boundary shapefile (replace path)",
"boundary <- st_read('data/boundary.shp')",
"# Preview",
"print(st_crs(boundary))",
"",
"# Plot basic map",
"ggplot(boundary) + geom_sf() + ggtitle('Project Area')"
)
writeLines(lines, file)
}
# Progressive updates
update_script <- function(day_offset, file = "analysis.R") {
lines <- c(
"# GIS Analysis Project",
sprintf("# Updated: %s (Day %d)", Sys.Date(), day_offset),
"library(sf)",
"library(ggplot2)",
"library(dplyr)",
"",
"# Load data",
"boundary <- st_read('data/boundary.shp')",
if(day_offset > 10) c(
"# Add land use layer",
"landuse <- st_read('data/landuse.shp')"
) else NULL,
if(day_offset > 20) c(
"# Spatial join: land use within boundary",
"join_tbl <- st_join(landuse, boundary, join = st_intersects)"
) else NULL,
if(day_offset > 30) c(
"# Summarize area by type",
"area_summary <- join_tbl %>% group_by(type) %>% summarise(area = sum(st_area(.)))"
) else NULL,
if(day_offset > 50) c(
"# Raster analysis: create elevation raster",
"elev <- raster('data/elevation.tif')",
"elev_crop <- crop(elev, as(boundary, 'Spatial'))"
) else NULL,
"",
"# Visualization",
"p <- ggplot() +",
"  geom_sf(data = boundary, fill = NA, color = 'black') +",
if(day_offset > 20) "  geom_sf(data = landuse, aes(fill = type), alpha = 0.6) +" else NULL,
"  ggtitle('GIS Analysis Results')",
"print(p)"
)
writeLines(unlist(lines), file)
}
#––– 4. Simulation loop with git commits
current <- dates$start
while (current <= dates$end) {
# Skip weekends
if (weekdays(current) %in% c("Saturday", "Sunday")) {
current <- current + days(1)
next
}
# Determine commit count
in_busy <- current >= dates$busy_start && current <= dates$busy_end
commits <- if (in_busy) sample(0:15, 1, prob = c(rep(0.02,6), rep(0.1,5), rep(0.15,5)))
else sample(0:10, 1, prob = c(0.4, rep(0.06,10)))
if (commits > 0) {
# On first commit of project, generate initial script and data structure
if (!file.exists("analysis.R")) {
dir.create("data", showWarnings = FALSE)
# Placeholder shapefiles to satisfy script (empty files)
file.create(file.path("data","boundary.shp"))
file.create(file.path("data","landuse.shp"))
file.create(file.path("data","elevation.tif"))
initial_script()
}
# Update script progressively
day_offset <- as.integer(current - dates$start)
update_script(day_offset)
# Make commits
for (i in seq_len(commits)) {
# Random timestamp within work hours
hour <- sample(9:18, 1)
minute <- sample(0:59, 1)
timestamp <- sprintf("%s %02d:%02d:00", current, hour, minute)
system("git add .")
msg_pool <- if (in_busy) c(
"Improved GIS script", "Enhanced spatial join", "Fixed boundary read error",
"Refined visualization", "Added raster processing"
) else c(
"Minor script update", "Updated comments", "Fixed typo in code",
"Added dplyr import"
)
msg <- sample(msg_pool, 1)
system(sprintf("GIT_COMMITTER_DATE='%s' git commit -m '%s' --date '%s'",
timestamp, msg, timestamp))
}
}
current <- current + days(1)
}
cat("✅ GIS project simulation complete\n")
#––– 0. Load required packages
required_pkgs <- c("sf", "raster", "ggplot2", "dplyr", "lubridate")
installed <- rownames(installed.packages())
for(pkg in required_pkgs) {
if (!pkg %in% installed) install.packages(pkg, repos = "https://cloud.r-project.org")
library(pkg, character.only = TRUE)
}
#––– 1. Configuration
dates <- list(
start      = as.Date("2024-09-06"),
end        = as.Date("2025-02-28"),
busy_start = as.Date("2024-11-01"),
busy_end   = as.Date("2024-12-15")
)
repo_dir <- "gis_project_simulation"
#––– 2. Initialize repository
if (!dir.exists(repo_dir)) dir.create(repo_dir)
setwd(repo_dir)
if (!dir.exists(".git")) system2("git", c("init"))
#––– 3. Define script generation functions
# Initial GIS analysis script
generate_initial <- function() {
dir.create("data", showWarnings = FALSE)
# Create placeholder files for demonstration
tools <- c("boundary.shp","landuse.shp","elevation.tif")
for(f in tools) file.create(file.path("data", f))
lines <- c(
"# GIS Analysis Project",
"# Initial setup: load spatial data",
"library(sf)",
"library(ggplot2)",
"\n# Load boundary shapefile",
"boundary <- st_read('data/boundary.shp')",
"print(st_crs(boundary))",
"\n# Basic plot",
"ggplot(boundary) + geom_sf() + ggtitle('Project Area')"
)
writeLines(lines, "analysis.R")
# Initial commit
system2("git", c("add", "analysis.R", "data"))
timestamp <- paste0(dates$start, " 09:00:00")
Sys.setenv(GIT_AUTHOR_DATE = timestamp, GIT_COMMITTER_DATE = timestamp)
system2("git", c("commit", "-m", "Initial project setup", "--date", timestamp))
}
# Progressive updates
update_script <- function(day_offset) {
use_theme <- day_offset > 20
use_landuse <- day_offset > 10
use_join    <- day_offset > 20
use_summary <- day_offset > 30
use_raster  <- day_offset > 50
lines <- c(
sprintf("# GIS Analysis Project - Day %d", day_offset),
sprintf("# Last updated: %s", Sys.Date()),
"library(sf)",
"library(ggplot2)",
"library(dplyr)",
"\n# Load boundary and optional layers",
"boundary <- st_read('data/boundary.shp')",
if(use_landuse)    "landuse <- st_read('data/landuse.shp')" else NULL,
if(use_raster)     "elev <- raster('data/elevation.tif')" else NULL,
if(use_join)       "join_tbl <- st_join(landuse, boundary, join = st_intersects)" else NULL,
if(use_summary)    "area_summary <- join_tbl %>% group_by(type) %>% summarise(area = sum(st_area(.)))" else NULL,
"\n# Visualization",
"p <- ggplot() +",
"  geom_sf(data = boundary, fill = NA, color = 'black') +",
if(use_landuse)    "  geom_sf(data = landuse, aes(fill = type), alpha = 0.5) +" else NULL,
if(use_raster)     "  geom_raster(data = as.data.frame(rasterToPoints(elev)), aes(x, y, fill = layer), alpha = 0.4) +" else NULL,
if(use_theme)      "  theme_minimal() +" else NULL,
"  ggtitle('GIS Analysis Results')",
"print(p)"
)
writeLines(unlist(lines), "analysis.R")
}
#––– 4. Simulation loop with git commits
current <- dates$start
while (current <= dates$end) {
# Skip weekends
if (weekdays(current) %in% c("Saturday","Sunday")) {
current <- current + days(1)
next
}
# Determine commit count
in_busy <- current >= dates$busy_start && current <= dates$busy_end
commits <- if(in_busy) sample(0:15, 1, prob = c(rep(0.02,6), rep(0.1,5), rep(0.15,5)))
else sample(0:10, 1, prob = c(0.4, rep(0.06,10)))
if(commits > 0) {
# Generate initial if missing
if(!file.exists("analysis.R")) generate_initial()
# Update script
day_offset <- as.integer(current - dates$start)
update_script(day_offset)
# Commit changes
for(i in seq_len(commits)) {
timestamp <- sprintf("%s %02d:%02d:00",
current,
sample(9:18,1),
sample(0:59,1)
)
Sys.setenv(GIT_AUTHOR_DATE = timestamp,
GIT_COMMITTER_DATE = timestamp)
system2("git", c("add", "analysis.R"))
msg_pool <- if(in_busy) c(
"Enhanced spatial join",
"Improved raster processing",
"Refined GIS plot",
"Updated data loading",
"Optimized code structure"
) else c(
"Minor tweaks",
"Updated comments",
"Fixed typo",
"Refactored code",
"Improved docs"
)
msg <- sample(msg_pool,1)
system2("git", c("commit", "-m", msg, "--date", timestamp))
}
}
current <- current + days(1)
}
cat("✅ GIS project simulation complete\n")
#––– 0. Load required packages
required_pkgs <- c("sf", "raster", "ggplot2", "dplyr", "lubridate")
installed <- rownames(installed.packages())
for(pkg in required_pkgs) {
if (!pkg %in% installed) install.packages(pkg, repos = "https://cloud.r-project.org")
library(pkg, character.only = TRUE)
}
#––– 1. Configuration
dates <- list(
start      = as.Date("2024-09-06"),
end        = as.Date("2025-02-28"),
busy_start = as.Date("2024-11-01"),
busy_end   = as.Date("2024-12-15")
)
repo_dir <- "gis_project_simulation"
#––– 2. Initialize repository
if (!dir.exists(repo_dir)) dir.create(repo_dir)
setwd(repo_dir)
if (!dir.exists(".git")) system2("git", c("init"))
#––– 3. Define script generation functions
# Initial GIS analysis script
generate_initial <- function() {
dir.create("data", showWarnings = FALSE)
# Create placeholder files for demonstration
tools <- c("boundary.shp","landuse.shp","elevation.tif")
for(f in tools) file.create(file.path("data", f))
lines <- c(
"# GIS Analysis Project",
"# Initial setup: load spatial data",
"library(sf)",
"library(ggplot2)",
"\n# Load boundary shapefile",
"boundary <- st_read('data/boundary.shp')",
"print(st_crs(boundary))",
"\n# Basic plot",
"ggplot(boundary) + geom_sf() + ggtitle('Project Area')"
)
writeLines(lines, "analysis.R")
# Initial commit
system2("git", c("add", "analysis.R", "data"))
timestamp <- paste0(dates$start, " 09:00:00")
Sys.setenv(GIT_AUTHOR_DATE = timestamp, GIT_COMMITTER_DATE = timestamp)
system2("git", c("commit", "-m", "Initial project setup", "--date", timestamp))
}
# Progressive updates
update_script <- function(day_offset) {
use_theme <- day_offset > 20
use_landuse <- day_offset > 10
use_join    <- day_offset > 20
use_summary <- day_offset > 30
use_raster  <- day_offset > 50
lines <- c(
sprintf("# GIS Analysis Project - Day %d", day_offset),
sprintf("# Last updated: %s", Sys.Date()),
"library(sf)",
"library(ggplot2)",
"library(dplyr)",
"\n# Load boundary and optional layers",
"boundary <- st_read('data/boundary.shp')",
if(use_landuse)    "landuse <- st_read('data/landuse.shp')" else NULL,
if(use_raster)     "elev <- raster('data/elevation.tif')" else NULL,
if(use_join)       "join_tbl <- st_join(landuse, boundary, join = st_intersects)" else NULL,
if(use_summary)    "area_summary <- join_tbl %>% group_by(type) %>% summarise(area = sum(st_area(.)))" else NULL,
"\n# Visualization",
"p <- ggplot() +",
"  geom_sf(data = boundary, fill = NA, color = 'black') +",
if(use_landuse)    "  geom_sf(data = landuse, aes(fill = type), alpha = 0.5) +" else NULL,
if(use_raster)     "  geom_raster(data = as.data.frame(rasterToPoints(elev)), aes(x, y, fill = layer), alpha = 0.4) +" else NULL,
if(use_theme)      "  theme_minimal() +" else NULL,
"  ggtitle('GIS Analysis Results')",
"print(p)"
)
writeLines(unlist(lines), "analysis.R")
}
#––– 4. Simulation loop with git commits
current <- dates$start
while (current <= dates$end) {
# Skip weekends
if (weekdays(current) %in% c("Saturday","Sunday")) {
current <- current + days(1)
next
}
# Determine commit count
in_busy <- current >= dates$busy_start && current <= dates$busy_end
commits <- if(in_busy) sample(0:15, 1, prob = c(rep(0.02,6), rep(0.1,5), rep(0.15,5)))
else sample(0:10, 1, prob = c(0.4, rep(0.06,10)))
if(commits > 0) {
# Generate initial if missing
if(!file.exists("analysis.R")) generate_initial()
# Update script
day_offset <- as.integer(current - dates$start)
update_script(day_offset)
# Commit changes
for(i in seq_len(commits)) {
timestamp <- sprintf("%s %02d:%02d:00",
current,
sample(9:18,1),
sample(0:59,1)
)
Sys.setenv(GIT_AUTHOR_DATE = timestamp,
GIT_COMMITTER_DATE = timestamp)
system2("git", c("add", "analysis.R"))
msg_pool <- if(in_busy) c(
"Enhanced spatial join",
"Improved raster processing",
"Refined GIS plot",
"Updated data loading",
"Optimized code structure"
) else c(
"Minor tweaks",
"Updated comments",
"Fixed typo",
"Refactored code",
"Improved docs"
)
msg <- sample(msg_pool,1)
system2("git", c("commit", "-m", msg, "--date", timestamp))
}
}
current <- current + days(1)
}
cat("✅ GIS project simulation complete\n")
#––– 0. Load required packages
equired_pkgs <- c("sf", "raster", "ggplot2", "dplyr", "lubridate")
installed <- rownames(installed.packages())
for(pkg in required_pkgs) {
if (!pkg %in% installed) install.packages(pkg, repos = "https://cloud.r-project.org")
library(pkg, character.only = TRUE)
}
#––– 1. Configuration
dates <- list(
start       = as.Date("2024-09-06"),
end         = as.Date("2025-02-28"),
busy_start  = as.Date("2024-11-01"),
busy_end    = as.Date("2024-12-15")
)
repo_dir <- "gis_project_simulation"
#––– 0. Load required packages
required_pkgs <- c("sf", "raster", "ggplot2", "dplyr", "lubridate")
installed <- rownames(installed.packages())
for(pkg in required_pkgs) {
if (!pkg %in% installed) install.packages(pkg, repos = "https://cloud.r-project.org")
library(pkg, character.only = TRUE)
}
#––– 1. Configuration
dates <- list(
start       = as.Date("2024-09-06"),
end         = as.Date("2025-02-28"),
busy_start  = as.Date("2024-11-01"),
busy_end    = as.Date("2024-12-15")
)
repo_dir <- "gis_project_simulation"
script_file <- "analysis.R"
shell_file  <- "run_simulation.sh"
#––– 2. Initialize repository
if (!dir.exists(repo_dir)) dir.create(repo_dir)
setwd(repo_dir)
if (!dir.exists(".git")) system2("git", c("init"))
#––– 3. Create initial GIS script and commit
generate_initial <- function() {
if (!dir.exists("data")) dir.create("data")
# placeholder files
tools <- c("boundary.shp","landuse.shp","elevation.tif")
for(f in tools) file.create(file.path("data", f))
lines0 <- c(
"# GIS Analysis Project - Day 0",
"library(sf); library(ggplot2)",
"# Placeholder: load and plot data",
"# boundary <- st_read('data/boundary.shp')"
)
writeLines(lines0, script_file)
system2("git", c("add", script_file, "data"))
ts <- paste(dates$start, "09:00:00")
Sys.setenv(GIT_AUTHOR_DATE = ts, GIT_COMMITTER_DATE = ts)
system2("git", c("commit", "-m", "Initial GIS project setup", "--date", ts))
}
#––– 4. Function to update GIS script
update_script <- function(day_offset) {
use_landuse <- day_offset > 10
use_theme   <- day_offset > 20
use_summary <- day_offset > 30
use_raster  <- day_offset > 50
lines <- c(
sprintf("# GIS Analysis Project - Day %d", day_offset),
sprintf("# Updated: %s", Sys.Date()),
"library(sf); library(ggplot2); library(dplyr)",
"# Load data",
"boundary <- st_read('data/boundary.shp')",
if(use_landuse) "landuse <- st_read('data/landuse.shp')" else NULL,
if(use_summary) "area_summary <- st_area(boundary)" else NULL,
if(use_raster)  "elev <- raster('data/elevation.tif')" else NULL,
"# Plot",
"p <- ggplot() + geom_sf(data = boundary, fill = NA) +",
if(use_landuse)    "  geom_sf(data = landuse, aes(fill=type), alpha=0.5) +" else NULL,
if(use_raster)     "  geom_raster(data = as.data.frame(rasterToPoints(elev)), aes(x,y,fill=layer), alpha=0.4) +" else NULL,
if(use_theme)      "  theme_minimal() +" else NULL,
"  ggtitle('GIS Analysis Results')",
"print(p)"
)
writeLines(unlist(lines), script_file)
}
#––– 5. Simulation loop & commits
current <- dates$start
while (current <= dates$end) {
# skip weekends
if (weekdays(current) %in% c("Saturday","Sunday")) { current <- current + days(1); next }
in_busy <- current >= dates$busy_start && current <= dates$busy_end
commits <- if(in_busy) sample(5:15, 1) else sample(0:5, 1)
if (commits > 0) {
if (!file.exists(script_file)) generate_initial()
offset <- as.integer(current - dates$start)
update_script(offset)
for (i in seq_len(commits)) {
ts <- sprintf("%s %02d:%02d:00", current, sample(9:18,1), sample(0:59,1))
Sys.setenv(GIT_AUTHOR_DATE = ts, GIT_COMMITTER_DATE = ts)
system2("git", c("add", script_file))
msg <- sprintf("Day %d - commit %d", offset, i)
system2("git", c("commit", "-m", msg, "--date", ts))
}
}
current <- current + days(1)
}
while (current <= dates$end) {
# skip weekends
if (weekdays(current) %in% c("Saturday","Sunday")) { current <- current + days(1); next }
in_busy <- current >= dates$busy_start && current <= dates$busy_end
commits <- if(in_busy) sample(5:15, 1) else sample(0:5, 1)
if (commits > 0) {
if (!file.exists(script_file)) generate_initial()
offset <- as.integer(current - dates$start)
update_script(offset)
for (i in seq_len(commits)) {
ts <- sprintf("%s %02d:%02d:00", current, sample(9:18,1), sample(0:59,1))
Sys.setenv(GIT_AUTHOR_DATE = ts, GIT_COMMITTER_DATE = ts)
system2("git", c("add", script_file))
msg <- sprintf("Day %d - commit %d", offset, i)
system2("git", c("commit", "-m", msg, "--date", ts))
}
}
current <- current + days(1)
}
#––– 6. Generate batch file for full run and push
shell_lines <- c(
"#!/bin/sh",
"# Run simulation and push commits",
sprintf("cd %s", repo_dir),
sprintf("Rscript %s", script_file),
"git push origin main"
)
writeLines(shell_lines, shell_file)
system2("chmod", c("+x", shell_file))
cat("✅ Simulation complete. Execute './run_simulation.sh' to re-run and push.\n")
