# filter ITD results not in the list of results below
#(!FinalITDResult %in% c("7-NPEV", "8-NEV", "9-Invalid", "4-PV1-SL", "4-PV1 SL", "6-PV3 SL") ) &
(!FinalITDResult %in% c("7-NPEV", "8-NEV", "9-Invalid") ) &
(!is.na(FinalITDResult) & time_itd_results_21days < 22 & time_itd_results_21days >= 0), 1, 0)
) |>
summarize(
ITD_results = sum(is_itd, na.rm = TRUE),
ITD_results_positive_sample = sum(is_itd_positive, na.rm = TRUE),
ITD_results_21days = sum(is_itd_21days, na.rm = TRUE),
ITD_results_21days_positive_sample = sum(is_itd_21days_positive_sample, na.rm = TRUE),
Prop_ITD_21days = 100 * ITD_results_21days / ITD_results,
Prop_ITD_21days_positive_sample = 100 * ITD_results_21days_positive_sample / ITD_results_positive_sample
) |>
dplyr::select(LabName, Prop_ITD_21days, Prop_ITD_21days_positive_sample)  |>
pivot_longer(
cols = starts_with("Prop"),
names_to = "Metric",
values_to = "Value" ) |> # drop_na(Value) |>
ggplot() +
geom_bar(aes(x = LabName, y = Value, fill = Metric), stat = "identity", position = position_dodge(), width = .9, color = "black") +
scale_fill_manual(
values = c("Prop_ITD_21days" = "gold", "Prop_ITD_21days_positive_sample" = "darkblue"),
labels = c("Prop_ITD_21days" = "Among all samples (with results)", "Prop_ITD_21days_positive_sample" = "Among positive samples")
) +
labs(x = "Lab Name", y = "% Samples with results", fill = "", title = "Timeliness ITD Results by Lab (21 days)") +
theme_minimal() +
geom_hline(yintercept = 80, linetype = "dotted", color = "green", linewidth = 2) + # green line for the target
scale_y_continuous(breaks = seq(0, 100, by = 20), expand = c(0, 0.1)) +  # Graduate y-axis by 20%
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text = element_text(face = "bold", size = 10, color = "black"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.line = element_line(color = "black", size = 0.8),
axis.ticks = element_line(color = "black", size = 0.8),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
AFPtables_21
# Check if the package pacman is installed
if (!require("pacman")) {install.packages("pacman")}
library("pacman")
# Load packages =====
#RODBC to be able to work with microsoft access databases, allowing R to connect to Open Database Connectivity (ODBC) APIs
p_load(tidyverse, RODBC,gt, gtExtras)
#Give the path to the ES database
Specify_the_period <- "WEEK 1 - 21, 2024"
path_ES_2024 = "../data/dbs/wk_24/es_2024_wk24.mdb"
# Connect to the Microsoft Access database ====
ESdb2024 <- DBI::dbConnect(odbc::odbc(),
.connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", path_ES_2024))
# load data in R =====
# Retrieve all data from the AFP database
EStables2024 <- DBI::dbGetQuery(ESdb2024, "SELECT * FROM Environmental ORDER BY IDNumber;", stringsAsFactors = FALSE) |>
as_tibble() |>
mutate(Labname = str_replace_all(Labname, c("ENTEBBE" = "UGA", "GHANA" = "GHA", "INRB" = "RDC", "IPD SEN" = "SEN",
"IPM, MAD" = "MAD", "IPM,MAD" = "MAD", "KEMRI" = "KEN", "IBD, Nigeria" = "IBD",
"MDG, Nigeria" = "MDG", "ZAM UTH" = "ZAM", "ZAM-UTH" = "ZAM")),
date_result_to_lab = coalesce(Dateresultstolab, Datefinalcultureresult),
date_itd_result = coalesce(DateFinalCombinedResult, DatefinalResultReported)
)
# Analysis of databases =====
EStimeliness <-
EStables2024 |>
filter(Countryname %in% c("Djibouti", "Somalia") == F) |> # removed djibouti and Somalia
group_by(Labname) |>
mutate(Labname = str_replace_all(Labname, "ESWATINI", "SOA" ),
Labname = if_else(Countryname == "Angola", "SOA", Labname)
#Labname = if_else( (is.na(Labname) & Countryname == "ANGOLA"), "SOA", Labname)
) |>
summarize(
workload_by_lab = n(),
ITD_results = sum(str_detect(Finalcellcultureresult, "^1") | str_detect(Finalcellcultureresult, "^4"), na.rm = TRUE),
ITD_results_positive = sum(
(str_detect(Finalcellcultureresult, "^1") | str_detect(Finalcellcultureresult, "^4")) &
# (str_detect(FinalcombinedrRTPCRresults, "Discordant") | str_detect(FinalcombinedrRTPCRresults, "PV2")), na.rm = TRUE),
(str_detect(FinalcombinedrRTPCRresults, "Discordant") | str_detect(FinalcombinedrRTPCRresults, "PV")), na.rm = TRUE),
ITD_results_21days = sum( (str_detect(Finalcellcultureresult, "^1") | str_detect(Finalcellcultureresult, "^4")) &
!is.na(FinalcombinedrRTPCRresults) & (date_itd_result - Datesampleinlab) < 22 &
(date_itd_result - Datesampleinlab) >= 0, na.rm = TRUE),
ITD_results_21days_positive = sum( (str_detect(Finalcellcultureresult, "^1") | str_detect(Finalcellcultureresult, "^4")) &
# (str_detect(FinalcombinedrRTPCRresults, "Discordant") | str_detect(FinalcombinedrRTPCRresults, "PV2")) &
(str_detect(FinalcombinedrRTPCRresults, "Discordant") | str_detect(FinalcombinedrRTPCRresults, "PV")) &
!is.na(FinalcombinedrRTPCRresults) & (date_itd_result - Datesampleinlab) < 22 &
(date_itd_result - Datesampleinlab) >= 0, na.rm = TRUE),
Prop_ITD_21days = round(ITD_results_21days / ITD_results * 100, 0),
Prop_ITD_21days_positive = round(ITD_results_21days_positive / ITD_results_positive * 100, 0)
) |>
select(Labname, Prop_ITD_21days, Prop_ITD_21days_positive) |>
pivot_longer(cols = c(Prop_ITD_21days, Prop_ITD_21days_positive), names_to = "Proportions", values_to = "Values") |>
filter(!is.na(Labname)) |> # remove zim as they dont analyze ES samples
ggplot() +
geom_bar(aes(x = Labname, y = Values, fill = Proportions), stat = "identity", position = position_dodge(), width = .9, color = "black") +
scale_fill_manual(
values = c("Prop_ITD_21days" = "gold", "Prop_ITD_21days_positive" = "darkblue"),
labels = c("Prop_ITD_21days" = "Among all samples (with results)", "Prop_ITD_21days_positive" = "Among positive samples")
) +
labs(x = "Lab Name", y = "% Samples with results", fill = "", title = "ES - ITD Results by Lab in 21 days") +
theme_minimal() +
geom_hline(yintercept = 80, linetype = "dotted", color = "green", linewidth = 2) + # green line for the target
scale_y_continuous(breaks = seq(0, 100, by = 20), expand = c(0, 0.1)) +  # Graduate y-axis by 20%
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text = element_text(face = "bold", size = 10, color = "black"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.line = element_line(color = "black", size = 0.8),
axis.ticks = element_line(color = "black", size = 0.8),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
EStimeliness
# Check if the package pacman is installed
if (!require("pacman")) {install.packages("pacman")}
library("pacman")
# Load packages =====
#RODBC to be able to work with microsoft access databases, allowing R to connect to Open Database Connectivity (ODBC) APIs
p_load(tidyverse, RODBC,gt, gtExtras, webshot, officer)
#Give the path to the AFP database
path_AFP <- "../data/dbs/wk_24/afp_wk_24.mdb"
# Connect to the Microsoft Access database =====
AFPdb <- DBI::dbConnect(odbc::odbc(),
.connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", path_AFP))
# load data in R =====
# Retrieve all data from the AFP database
AFPtables <- DBI::dbGetQuery(AFPdb, "SELECT * FROM POLIOLAB ORDER BY LabName, EpidNumber;", stringsAsFactors = FALSE) |>
tibble() |>  mutate(
proxy_date_infor_itd = coalesce(DateIsolateinforITD, DateLarmIsolateRec, DateRarmIsolateSentforITD),
proxy_date_itd_result = coalesce(DateFinalrRTPCRResults, DateFinalResultsSentReflabEPI)
) |>
# select samples collected in 2024 only
filter(substr(ICLabID, start = 5, stop = 6) == 24 )
Specify_the_period <- paste0("WEEK 1 - ",
(epiweek(as.Date(ymd_hms(AFPtables$DateUpdated))) - 1) |> unique(), ", 2024")
# Analysis of databases =====
AFPtables_gt35 <-
AFPtables |>
filter(LabName != "CDC", !is.na(DateOfOnset)) |>
#filter(substr(EpidNumber, start = 1, stop = 3) %in% c("DJI", "SOM") == F ) |> #remove somalia and djibouti
filter( !(LabName == "SOA" & substr(ICLabID, start = 1, stop = 3) %in% c("CIV", "MAD", "RDC", "UGA", "ZAM", "ZIM")) ) |> # remove sequencing data
select(LabName, DateOfOnset, DateStoolReceivedinLab, StoolCondition, FinalCellCultureResult, DateFinalCellCultureResults,
proxy_date_infor_itd, FinalITDResult, DateFinalrRTPCRResults, proxy_date_itd_result) |>
mutate(FinalCellCultureResult = str_replace_all(FinalCellCultureResult, "Supected", "Suspected") ) |>
#distinct(ICLabID, .keep_all = "TRUE") |>
group_by(LabName) |>
mutate(workload_by_lab = n(),
time_itd_results_35days = as.numeric(difftime(proxy_date_itd_result, DateOfOnset, units = "days")),
is_itd = if_else( (FinalCellCultureResult %in% c("1-Suspected Poliovirus", "4-Suspected Poliovirus + NPENT")), 1, 0),
is_itd_35days = if_else( (FinalCellCultureResult %in% c("1-Suspected Poliovirus", "4-Suspected Poliovirus + NPENT")) &
(!is.na(FinalITDResult) & time_itd_results_35days < 36 & time_itd_results_35days >= 0), 1, 0)
) |>
summarize(
ITD_results = sum(is_itd, na.rm = TRUE),
ITD_results_35days = sum(is_itd_35days, na.rm = TRUE),
Prop_ITD_35days = 100 * ITD_results_35days / ITD_results,
) |>
dplyr::select(LabName, Prop_ITD_35days)  |>
pivot_longer(
cols = starts_with("Prop"),
names_to = "Metric",
values_to = "Value" ) |> # drop_na(Value) |>
ggplot() +
geom_bar(aes(x = LabName, y = Value, fill = Metric), stat = "identity", position = position_dodge(), width = .9, color = "black") +
scale_fill_manual(
values = c("Prop_ITD_35days" = "gold"),
labels = c("Prop_ITD_35days" = "Among all samples (with results)")
) +
labs(x = "Lab Name", y = "% Samples with results", fill = "", title = "ITD Results by Lab on AFP Isolates") +
theme_minimal() +
geom_hline(yintercept = 80, linetype = "dotted", color = "black", linewidth = 2) + # green line for the target
scale_y_continuous(breaks = seq(0, 100, by = 20), expand = c(0, 0.1)) +  # Graduate y-axis by 20%
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text = element_text(face = "bold", size = 10, color = "black"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.line = element_line(color = "black", size = 0.8),
axis.ticks = element_line(color = "black", size = 0.8),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
AFPtables_gt35
# Check if the package pacman is installed
if (!require("pacman")) {install.packages("pacman")}
library("pacman")
# Load packages =====
#RODBC to be able to work with microsoft access databases, allowing R to connect to Open Database Connectivity (ODBC) APIs
p_load(tidyverse, RODBC,gt, gtExtras, webshot, officer)
#Give the path to the AFP database
path_AFP <- "../data/dbs/wk_24/afp_wk_24.mdb"
# Connect to the Microsoft Access database =====
AFPdb <- DBI::dbConnect(odbc::odbc(),
.connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", path_AFP))
# load data in R =====
# Retrieve all data from the AFP database
AFPtables <- DBI::dbGetQuery(AFPdb, "SELECT * FROM POLIOLAB ORDER BY LabName, EpidNumber;", stringsAsFactors = FALSE) |>
tibble() |>  mutate(
proxy_date_infor_itd = coalesce(DateIsolateinforITD, DateLarmIsolateRec, DateRarmIsolateSentforITD),
proxy_date_itd_result = coalesce(DateFinalrRTPCRResults, DateFinalResultsSentReflabEPI)
) |>
# select samples collected in 2024 only
filter(substr(ICLabID, start = 5, stop = 6) == 24 )
Specify_the_period <- paste0("WEEK 1 - ",
(epiweek(as.Date(ymd_hms(AFPtables$DateUpdated))) - 1) |> unique(), ", 2024")
# Analysis of databases =====
AFPCountries_35p <-
AFPtables |>
filter(LabName != "CDC", !is.na(DateOfOnset)) |>
filter(substr(EpidNumber, start = 1, stop = 3) %in% c("DJI", "SOM") == F ) |> #remove somalia and djibouti
mutate(
CountryCode = substr(EpidNumber, start = 1, stop = 3), .before = LabName,
CountryCode = if_else(LabName == "MAD", "MAD", CountryCode )) |>
mutate(IST = case_when(CountryCode %in% c("ALG", "BEN", "BFA", "CIV", "GAM", "GHA", "GUB", "GUI", "LIB", "MAI", "MAU",
"NIE", "NIG", "SEN", "SIL",  "TOG" ) ~ "WEST",
CountryCode %in% c( "ANG", "CAE", "CAF", "CHA",  "EQG", "GAB", "CNG", "RDC") ~ "CENTRAL",
CountryCode %in% c( "BOT", "BUU", "COM", "ETH", "KEN", "LES", "MAD", "MAL", "MOZ", "NAM", "RSS", "RWA",
"SOA", "SWZ", "TAN", "UGA", "ZAM", "ZIM") ~ "ESA"), .before = CountryCode) |>
filter( !(LabName == "SOA" & substr(ICLabID, start = 1, stop = 3) %in% c("CIV", "MAD", "RDC", "UGA", "ZAM", "ZIM")) ) |> # remove sequencing data
#filter( !(LabName %in% c("CAE", "CAF", "RDC", "ETH", "KEN", "MAD", "ZAM", "ZIM", "ALG", "GHA")) ) |>
select(IST, CountryCode, LabName, DateOfOnset, DateStoolReceivedinLab, StoolCondition, FinalCellCultureResult, DateFinalCellCultureResults,
proxy_date_infor_itd, FinalITDResult, DateFinalrRTPCRResults, proxy_date_itd_result) |>
mutate(FinalCellCultureResult = str_replace_all(FinalCellCultureResult, "Supected", "Suspected") ) |>
#distinct(ICLabID, .keep_all = "TRUE") |>
group_by(IST, CountryCode) |>
filter( !(CountryCode %in% c("ALG", "CAE", "CAF", "CIV", "ETH", "GHA", "NIE", "KEN", "MAD", "RDC", "SEN", "SOA", "UGA", "ZAM", "ZIM")) ) |>
mutate(workload_by_lab = n(),
time_itd_results_35days = as.numeric(difftime(proxy_date_itd_result, DateOfOnset, units = "days")),
is_itd = if_else( (FinalCellCultureResult %in% c("1-Suspected Poliovirus", "4-Suspected Poliovirus + NPENT")), 1, 0),
is_itd_35days = if_else( (FinalCellCultureResult %in% c("1-Suspected Poliovirus", "4-Suspected Poliovirus + NPENT")) &
(!is.na(FinalITDResult) & time_itd_results_35days < 36 & time_itd_results_35days >= 0), 1, 0)
) |>
summarize(
ITD_results = sum(is_itd, na.rm = TRUE),
ITD_results_35days = sum(is_itd_35days, na.rm = TRUE),
Prop_ITD_35days = 100 * ITD_results_35days / ITD_results,
) |>
filter(!is.na(Prop_ITD_35days) & Prop_ITD_35days > 0) |>
#group_by(IST) |>  summarize(median_Prop_ITD_35days = median(Prop_ITD_35days, na.rm = TRUE)) #to know the proportion 35 days by IST
dplyr::select(IST, CountryCode, Prop_ITD_35days)  |>
pivot_longer(
cols = starts_with("Prop"),
names_to = "Metric",
values_to = "Value" ) |> # drop_na(Value) |>
ggplot() +
geom_bar(aes(x = interaction(CountryCode, IST), y = Value, fill = IST), stat = "identity", position = position_dodge(), width = .9, color = "black") +
scale_fill_manual(
values = c("Prop_ITD_35days" = "gold"),
labels = c("Prop_ITD_35days" = "Among all samples (with results)")
) +
scale_fill_manual(
values = c("WEST" = "darkblue", "CENTRAL" = "orange", "ESA" = "gold"),
labels = c("WEST" = "IST West", "CENTRAL" = "IST Central", "ESA" = "IST - ESA")
) +
labs(x = "Country Code", y = "% Samples with results", fill = "", title = "") +
theme_minimal() +
geom_hline(yintercept = 80, linetype = "dotted", color = "green", linewidth = 2) + # green line for the target
scale_y_continuous(breaks = seq(0, 100, by = 20), expand = c(0, 0.1)) +  # Graduate y-axis by 20%
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text = element_text(face = "bold", size = 10, color = "black"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.line = element_line(color = "black", size = 0.8),
axis.ticks = element_line(color = "black", size = 0.8),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
) + scale_x_discrete(labels = function(x) sub("\\..*$", "", x)) # To display only CountryCode on x-axis
AFPCountries_35p
# Check if the package pacman is installed
if (!require("pacman")) {install.packages("pacman")}
library("pacman")
# Load packages =====
#RODBC to be able to work with microsoft access databases, allowing R to connect to Open Database Connectivity (ODBC) APIs
p_load(tidyverse, RODBC,gt, gtExtras)
#Give the path to the ES database
Specify_the_period <- "WEEK 1 - 24, 2024"
path_ES_2024 = "../data/dbs/wk_24/es_2024_wk24.mdb"
# Connect to the Microsoft Access database ====
ESdb2024 <- DBI::dbConnect(odbc::odbc(),
.connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", path_ES_2024))
# load data in R =====
# Retrieve all data from the AFP database
EStables2024 <- DBI::dbGetQuery(ESdb2024, "SELECT * FROM Environmental ORDER BY IDNumber;", stringsAsFactors = FALSE) |>
as_tibble() |>
mutate(Labname = str_replace_all(Labname, c("ENTEBBE" = "UGA", "GHANA" = "GHA", "INRB" = "RDC", "IPD SEN" = "SEN",
"IPM, MAD" = "MAD", "IPM,MAD" = "MAD", "KEMRI" = "KEN", "IBD, Nigeria" = "IBD",
"MDG, Nigeria" = "MDG", "ZAM UTH" = "ZAM", "ZAM-UTH" = "ZAM")),
date_result_to_lab = coalesce(Dateresultstolab, Datefinalcultureresult),
date_itd_result = coalesce(DateFinalCombinedResult, DatefinalResultReported)
)
# Analysis of databases =====
EStimeliness35 <-
EStables2024 |>
filter(Countryname %in% c("Djibouti", "Somalia") == F) |> # removed djibouti and Somalia
group_by(Labname) |>
mutate(Labname = str_replace_all(Labname, "ESWATINI", "SOA" ),
Labname = if_else(Countryname == "Angola", "SOA", Labname)
) |>
summarize(
workload_by_lab = n(),
ITD_results = sum(str_detect(Finalcellcultureresult, "^1") | str_detect(Finalcellcultureresult, "^4"), na.rm = TRUE),
ITD_results_21days = sum( (str_detect(Finalcellcultureresult, "^1") | str_detect(Finalcellcultureresult, "^4")) &
!is.na(FinalcombinedrRTPCRresults) & (date_itd_result - Datesampleinlab) < 36 &
(date_itd_result - Datesampleinlab) >= 0, na.rm = TRUE),
Prop_ITD_21days = round(ITD_results_21days / ITD_results * 100, 0),
) |>
select(Labname, Prop_ITD_21days) |>
pivot_longer(cols = Prop_ITD_21days, names_to = "Proportions", values_to = "Values") |>
filter(!is.na(Labname)) |> # remove zim as they dont analyze ES samples
ggplot() +
geom_bar(aes(x = Labname, y = Values, fill = Proportions), stat = "identity", position = position_dodge(), width = .9, color = "black") +
scale_fill_manual(
values = c("Prop_ITD_21days" = "cyan4"),
labels = c("Prop_ITD_21days" = "Among all samples (with results)")
) +
labs(x = "Lab Name", y = "% Samples with results", fill = "", title = "ES - ITD Results by Lab in 35 days") +
theme_minimal() +
geom_hline(yintercept = 80, linetype = "dotted", color = "green", linewidth = 2) + # green line for the target
scale_y_continuous(breaks = seq(0, 100, by = 20), expand = c(0, 0.1)) +  # Graduate y-axis by 20%
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text = element_text(face = "bold", size = 10, color = "black"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.line = element_line(color = "black", size = 0.8),
axis.ticks = element_line(color = "black", size = 0.8),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# saving the plot as image png
ggsave("EStimeliness35_plot.png", EStimeliness35, path = "../data/outputs/")
EStimeliness35
# Check if the package pacman is installed
if (!require("pacman")) {install.packages("pacman")}
library("pacman")
# Load packages =====
#RODBC to be able to work with microsoft access databases, allowing R to connect to Open Database Connectivity (ODBC) APIs
p_load(tidyverse, RODBC,gt, gtExtras)
#Give the path to the ES database
Specify_the_period <- "WEEK 1 - 21, 2024"
path_ES_2024 = "../data/dbs/wk_24/es_2024_wk24.mdb"
# Connect to the Microsoft Access database ====
ESdb2024 <- DBI::dbConnect(odbc::odbc(),
.connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", path_ES_2024))
# load data in R =====
# Retrieve all data from the AFP database
EStables2024 <- DBI::dbGetQuery(ESdb2024, "SELECT * FROM Environmental ORDER BY IDNumber;", stringsAsFactors = FALSE) |>
as_tibble() |>
mutate(Labname = str_replace_all(Labname, c("ENTEBBE" = "UGA", "GHANA" = "GHA", "INRB" = "RDC", "IPD SEN" = "SEN",
"IPM, MAD" = "MAD", "IPM,MAD" = "MAD", "KEMRI" = "KEN", "IBD, Nigeria" = "IBD",
"MDG, Nigeria" = "MDG", "ZAM UTH" = "ZAM", "ZAM-UTH" = "ZAM")),
date_result_to_lab = coalesce(Dateresultstolab, Datefinalcultureresult),
date_itd_result = coalesce(DateFinalCombinedResult, DatefinalResultReported)
)
# Analysis of databases =====
ES_byCountry35 <-
EStables2024 |>
filter(Countryname %in% c("Djibouti", "Somalia") == F) |> # removed djibouti and Somalia Countrycode
mutate(IST = case_when(Countrycode %in% c("ALG", "BEN", "BFA", "CIV", "GAM", "GHA", "GUB", "GUI", "LIB", "MAI", "MAU",
"NIE", "NIG", "SEN", "SIL",  "TOG" ) ~ "WEST",
Countrycode %in% c( "ANG", "CAE", "CAF", "CHA",  "EQG", "GAB", "CNG", "RDC") ~ "CENTRAL",
Countrycode %in% c( "BOT", "BUU", "COM", "ETH", "KEN", "LES", "MAD", "MAL", "MOZ", "NAM", "RSS", "RWA",
"SOA", "SWZ", "SYC", "TAN", "UGA", "ZAM", "ZIM") ~ "ESA"), .before = Countrycode) |>
group_by(IST, Countrycode) |>
mutate(Labname = str_replace_all(Labname, "ESWATINI", "SOA" ),
Labname = if_else(Countryname == "Angola", "SOA", Labname)
) |>
summarize(
workload_by_lab = n(),
ITD_results = sum(str_detect(Finalcellcultureresult, "^1") | str_detect(Finalcellcultureresult, "^4"), na.rm = TRUE),
ITD_results_21days = sum( (str_detect(Finalcellcultureresult, "^1") | str_detect(Finalcellcultureresult, "^4")) &
!is.na(FinalcombinedrRTPCRresults) & (date_itd_result - Dateofcollection) < 36 &
(date_itd_result - Dateofcollection) >= 0, na.rm = TRUE),
Prop_ITD_35days = round(ITD_results_21days / ITD_results * 100, 0),
) |>
select(IST, Countrycode, Prop_ITD_35days) |>
filter(!is.na(Prop_ITD_35days), Prop_ITD_35days > 0) |>
pivot_longer(cols = c(Prop_ITD_35days), names_to = "Proportions", values_to = "Values") |>
filter(Countrycode != c("SOM") ) |> #removed somalia from the list of countries
filter( !(Countrycode %in% c("ALG", "CAE", "CAF", "CIV", "ETH", "GHA", "NIE", "KEN", "MAD", "RDC", "SEN", "SOA", "UGA", "ZAM")) ) |>
ggplot() +
geom_bar(aes(x =  interaction(Countrycode, IST), y = Values, fill = IST), stat = "identity", position = position_dodge(), width = .9, color = "black") +
scale_fill_manual(
values = c("Prop_ITD_35days" = "gold", "Prop_ITD_35days" = "darkblue"),
labels = c("Prop_ITD_35days" = "Among all samples (with results)", "Prop_ITD_35days" = "Among positive samples")
) +
scale_fill_manual(
values = c("WEST" = "darkblue", "CENTRAL" = "orange", "ESA" = "gold"),
labels = c("WEST" = "IST West", "CENTRAL" = "IST Central", "ESA" = "IST - ESA")
) +
labs(x = "Lab Name", y = "% Samples with results", fill = "", title = "") +
theme_minimal() +
geom_hline(yintercept = 80, linetype = "dotted", color = "green", linewidth = 2) + # green line for the target
scale_y_continuous(breaks = seq(0, 100, by = 20), expand = c(0, 0.1)) +  # Graduate y-axis by 20%
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text = element_text(face = "bold", size = 10, color = "black"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.line = element_line(color = "black", size = 0.8),
axis.ticks = element_line(color = "black", size = 0.8),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
) + scale_x_discrete(labels = function(x) sub("\\..*$", "", x)) # To display only CountryCode on x-axis
ES_byCountry35
# Check if the package pacman is installed
if (!require("pacman")) {install.packages("pacman")}
library("pacman")
# Load packages =====
#RODBC to be able to work with microsoft access databases, allowing R to connect to Open Database Connectivity (ODBC) APIs
p_load(tidyverse, RODBC,gt, gtExtras)
#Give the path to the ES database
Specify_the_period <- "WEEK 1 - 21, 2024"
path_ES_2024 = "../data/dbs/wk_24/es_2024_wk24.mdb"
# Connect to the Microsoft Access database ====
ESdb2024 <- DBI::dbConnect(odbc::odbc(),
.connection_string = paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", path_ES_2024))
# load data in R =====
# Retrieve all data from the AFP database
EStables2024 <- DBI::dbGetQuery(ESdb2024, "SELECT * FROM Environmental ORDER BY IDNumber;", stringsAsFactors = FALSE) |>
as_tibble() |>
mutate(Labname = str_replace_all(Labname, c("ENTEBBE" = "UGA", "GHANA" = "GHA", "INRB" = "RDC", "IPD SEN" = "SEN",
"IPM, MAD" = "MAD", "IPM,MAD" = "MAD", "KEMRI" = "KEN", "IBD, Nigeria" = "IBD",
"MDG, Nigeria" = "MDG", "ZAM UTH" = "ZAM", "ZAM-UTH" = "ZAM")),
date_result_to_lab = coalesce(Dateresultstolab, Datefinalcultureresult),
date_itd_result = coalesce(DateFinalCombinedResult, DatefinalResultReported)
)
# Analysis of databases =====
ES_byCountry35 <-
EStables2024 |>
filter(Countryname %in% c("Djibouti", "Somalia") == F) |> # removed djibouti and Somalia Countrycode
mutate(IST = case_when(Countrycode %in% c("ALG", "BEN", "BFA", "CIV", "GAM", "GHA", "GUB", "GUI", "LIB", "MAI", "MAU",
"NIE", "NIG", "SEN", "SIL",  "TOG" ) ~ "WEST",
Countrycode %in% c( "ANG", "CAE", "CAF", "CHA",  "EQG", "GAB", "CNG", "RDC") ~ "CENTRAL",
Countrycode %in% c( "BOT", "BUU", "COM", "ETH", "KEN", "LES", "MAD", "MAL", "MOZ", "NAM", "RSS", "RWA",
"SOA", "SWZ", "SYC", "TAN", "UGA", "ZAM", "ZIM") ~ "ESA"), .before = Countrycode) |>
group_by(IST, Countrycode) |>
mutate(Labname = str_replace_all(Labname, "ESWATINI", "SOA" ),
Labname = if_else(Countryname == "Angola", "SOA", Labname)
) |>
summarize(
workload_by_lab = n(),
ITD_results = sum(str_detect(Finalcellcultureresult, "^1") | str_detect(Finalcellcultureresult, "^4"), na.rm = TRUE),
ITD_results_21days = sum( (str_detect(Finalcellcultureresult, "^1") | str_detect(Finalcellcultureresult, "^4")) &
!is.na(FinalcombinedrRTPCRresults) & (date_itd_result - Dateofcollection) < 36 &
(date_itd_result - Dateofcollection) >= 0, na.rm = TRUE),
Prop_ITD_35days = round(ITD_results_21days / ITD_results * 100, 0),
) |>
select(IST, Countrycode, Prop_ITD_35days) |>
filter(!is.na(Prop_ITD_35days), Prop_ITD_35days > 0) |>
pivot_longer(cols = c(Prop_ITD_35days), names_to = "Proportions", values_to = "Values") |>
filter(Countrycode != c("SOM") ) |> #removed somalia from the list of countries
filter( !(Countrycode %in% c("ALG", "CAE", "CAF", "CIV", "ETH", "GHA", "NIE", "KEN", "MAD", "RDC", "SEN", "SOA", "UGA", "ZAM")) ) |>
ggplot() +
geom_bar(aes(x =  interaction(Countrycode, IST), y = Values, fill = IST), stat = "identity", position = position_dodge(), width = .9, color = "black") +
scale_fill_manual(
values = c("Prop_ITD_35days" = "gold", "Prop_ITD_35days" = "darkblue"),
labels = c("Prop_ITD_35days" = "Among all samples (with results)", "Prop_ITD_35days" = "Among positive samples")
) +
scale_fill_manual(
values = c("WEST" = "darkblue", "CENTRAL" = "orange", "ESA" = "gold"),
labels = c("WEST" = "IST West", "CENTRAL" = "IST Central", "ESA" = "IST - ESA")
) +
labs(x = "Lab Name", y = "% Samples with results", fill = "", title = "") +
theme_minimal() +
geom_hline(yintercept = 80, linetype = "dotted", color = "green", linewidth = 2) + # green line for the target
scale_y_continuous(breaks = seq(0, 100, by = 20), expand = c(0, 0.1)) +  # Graduate y-axis by 20%
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 14),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text = element_text(face = "bold", size = 10, color = "black"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.line = element_line(color = "black", size = 0.8),
axis.ticks = element_line(color = "black", size = 0.8),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
) + scale_x_discrete(labels = function(x) sub("\\..*$", "", x)) # To display only CountryCode on x-axis
ES_byCountry35
